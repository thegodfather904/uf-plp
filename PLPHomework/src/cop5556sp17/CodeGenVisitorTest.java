
package cop5556sp17;

import java.io.FileOutputStream;
import java.io.OutputStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorTest {

	static final boolean doPrint = true;
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	boolean devel = false;
	boolean grade = true;
	
	
	@Test
	public void myTests() throws Exception {
		String paramDecTest = "emptyProg boolean x, integer z{boolean bool bool <- false; x <- bool;}";
//		String scoping = "emptyProg integer x{integer x x <- 10; integer y y <- 11; integer z z <- 12; if(x == 10){ integer x x <- 999; if(y==11){z <-x;} } y <- x;}";
//		String input = "emptyProg integer x{integer y integer count count <- 0; while(count < 10){y <- count + 1; count <- count + 1;} y <- 2;}";	
//		String simpleTest = "emptyProg integer x{integer y y <- 12;}";	
		Scanner scanner = new Scanner(paramDecTest);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		String[] args = new String[] {"true", "1"} ;
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void emptyProg() throws Exception {
		//scan, parse, and type check the program
//		String progname = "emptyProg";
//		String input = progname + "  {}";		
//		Scanner scanner = new Scanner(input);
//		scanner.scan();
//		Parser parser = new Parser(scanner);
//		ASTNode program = parser.parse();
//		TypeCheckVisitor v = new TypeCheckVisitor();
//		program.visit(v, null);
//		show(program);
//		
//		//generate code
//		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
//		byte[] bytecode = (byte[]) program.visit(cv, null);
//		
//		//output the generated bytecode
//		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
//		String name = ((Program) program).getName();
//		String classFileName = "bin/" + name + ".class";
//		OutputStream output = new FileOutputStream(classFileName);
//		output.write(bytecode);
//		output.close();
//		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
//		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
//		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
//		instance.run();
	}


	@Before
	public void initLog(){
		if (devel || grade) PLPRuntimeLog.initLog();
	}
	
	@After
	public void printLog(){
		System.out.println(PLPRuntimeLog.getString());
	}
	
}
